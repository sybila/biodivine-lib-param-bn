name: build
# This should ensure that the workflow won't run on `dev-*` branches, but will
# otherwise execute on any other branch and any pull request (including dev
# branches).
on:
  push:
    branches-ignore:
      - 'dev-*'
  pull_request:
    branches:
      - '*'

env:
  # A fixed version used for testing, so that the builds don't
  # spontaneously break after a few years.
  # Make sure to update this from time to time.
  RUST_VERSION: "1.89.0"
  MIN_RUST_VERSION: "1.85.0"
  Z3_VERSION: "4.13.3"
  RUSTFLAGS: "-D warnings"
  CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN }}"

jobs:
#  # Check formatting
#  fmt:
#    name: Rustfmt
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: dtolnay/rust-toolchain@stable
#        with:
#          toolchain: ${{ env.RUST_VERSION }}
#          components: rustfmt
#      - run: cargo fmt --all -- --check
#
#  # Run basic code validity check.
#  check:
#    needs: fmt
#    name: Check
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: dtolnay/rust-toolchain@stable
#        with:
#          toolchain: ${{ env.RUST_VERSION }}
#      - run: cargo check --all-features
#
#  # Run all tests
#  test:
#    needs: check
#    name: Test Suite
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      # Tests need Z3 solver to run.
#      - name: Setup Z3.
#        id: z3
#        uses: cda-tum/setup-z3@v1
#        with:
#          version: ${{ env.Z3_VERSION }}
#          add_to_library_path: true
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      - run: z3 --version
#      - uses: dtolnay/rust-toolchain@stable
#        with:
#          toolchain: ${{ env.RUST_VERSION }}
#          components: rustfmt
#      - run: cargo test --all-features
#
#  # Check code style
#  clippy:
#    needs: check
#    name: Clippy
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: dtolnay/rust-toolchain@stable
#        with:
#          toolchain: ${{ env.RUST_VERSION }}
#          components: clippy
#      - run: cargo clippy --all-features
#
#  # Validate minimum supported Rust version declared in Cargo.toml.
#  minimum-supported:
#    name: Minimum supported version (1.85) - Check and Test
#    needs: fmt
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - name: Setup Z3.
#        id: z3
#        uses: cda-tum/setup-z3@v1
#        with:
#          version: ${{ env.Z3_VERSION }}
#          add_to_library_path: true
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      - uses: dtolnay/rust-toolchain@stable
#        with:
#          toolchain: ${{ env.MIN_RUST_VERSION }}
#          components: clippy
#      - run: cargo check --all-features
#      - run: cargo test --all-features
#      - run: cargo clippy --all-features

  # Compute code coverage
  codecov:
    name: Code coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout.
        uses: actions/checkout@v4
      - name: Setup Z3.
        id: z3
        uses: cda-tum/setup-z3@v1
        with:
          version: ${{ env.Z3_VERSION }}
          add_to_library_path: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: z3 --version
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      # Install action using cargo-binstall, which is faster because we don't have to compile tarpaulin every time.
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-tarpaulin
      - run: cargo tarpaulin --verbose --lib --examples --all-features --out xml
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v4
        if: ${{ env.CODECOV_TOKEN != '' }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: cobertura.xml
